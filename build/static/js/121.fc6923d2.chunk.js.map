{"version":3,"file":"static/js/121.fc6923d2.chunk.js","mappings":"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","sources":["Components/Forms/Formik/TimePicker.js","Container/Auth/Planner/Child/HourForm.js","Container/Auth/Planner/Child/PlannerTab.js","Container/Auth/Planner/Child/FormChooserModal.js","../node_modules/reselect/es/index.js","Container/Auth/Planner/PlannerSelector.js","Container/Auth/Planner/Child/PlannerCalendar.js"],"sourcesContent":["import React from \"react\";\r\nimport { get } from \"lodash\";\r\nimport moment from \"moment\";\r\n\r\nimport { StyledTimePicker } from \"../../UI/Antd\";\r\nimport { ValidationError, StyledLabel } from \"../../UI/Elements\";\r\nimport { FlexContainer } from \"../../UI/Layout\";\r\nexport const TimePicker = ({\r\n  value,\r\n  field,\r\n  label,\r\n  noLabel,\r\n  isColumn,\r\n  inlineLabel,\r\n\r\n  form: { setFieldValue, setFieldTouched, touched, errors },\r\n  ...props\r\n}) => {\r\n  if (isColumn) {\r\n    return (\r\n      <>\r\n        {!noLabel && (\r\n          <StyledLabel style={{ flexBasis: \"20%\" }}>{label}</StyledLabel>\r\n        )}\r\n        <StyledTimePicker\r\n          allowClear={false}\r\n          {...field}\r\n          {...props}\r\n          format=\"HH:mm\"\r\n          onChange={(time, timeString) =>\r\n            setFieldValue(field.name, moment(timeString, \"HH:mm\"))\r\n          }\r\n          value={value}\r\n          onBlur={() => setFieldTouched(field.name, true)}\r\n        />\r\n\r\n        {get(touched, field.name) && get(errors, field.name) && (\r\n          <ValidationError>{get(errors, field.name)}</ValidationError>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <FlexContainer>\r\n        <FlexContainer alignItems=\"center\" flexWrap={inlineLabel && \"nowrap\"}>\r\n          {!noLabel && (\r\n            <StyledLabel style={{ flexBasis: \"20%\" }}>{label}</StyledLabel>\r\n          )}\r\n          <StyledTimePicker\r\n            allowClear={false}\r\n            {...field}\r\n            {...props}\r\n            format=\"HH:mm\"\r\n            onChange={(time, timeString) =>\r\n              setFieldValue(field.name, moment(timeString, \"HH:mm\"))\r\n            }\r\n            value={value}\r\n            onBlur={() => setFieldTouched(field.name, true)}\r\n          />\r\n        </FlexContainer>\r\n      </FlexContainer>\r\n      {get(touched, field.name) && get(errors, field.name) && (\r\n        <ValidationError>{get(errors, field.name)}</ValidationError>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { base_url } from \"../../../../Config/Auth\";\r\n//import LazySelect from \"../../../../Components/Forms/Formik/LazySelect\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { Button, Icon, Switch } from \"antd\";\r\nimport { Formik, Form, Field, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport moment from \"moment\";\r\nimport { Spacer, StyledLabel } from \"../../../../Components/UI/Elements\";\r\nimport SearchSelect from \"../../../../Components/Forms/Formik/SearchSelect\";\r\nimport { InputComponent } from \"../../../../Components/Forms/Formik/InputComponent\";\r\nimport AddressFieldArray from \"../../../../Components/Forms/Formik/AddressFieldArray\";\r\nimport { SelectComponent } from \"../../../../Components/Forms/Formik/SelectComponent\";\r\nimport { DatePicker } from \"../../../../Components/Forms/Formik/DatePicker\";\r\nimport { TimePicker } from \"../../../../Components/Forms/Formik/TimePicker\";\r\nimport {\r\n    getCandidateProject,\r\n    addHour\r\n}\r\n    from \"../PlannerAction\"\r\n// import {\r\n//   addHour,\r\n//   // deleteEvent,\r\n//   // updateEvent,\r\n//   // handleEventModal,\r\n// } from \"../../Event/EventAction\";\r\n// import { handleChooserModal } from \"../../Planner/PlannerAction\";\r\nimport { FlexContainer } from \"../../../../Components/UI/Layout\";\r\nimport { TextareaComponent } from \"../../../../Components/Forms/Formik/TextareaComponent\";\r\nimport { StyledPopconfirm } from \"../../../../Components/UI/Antd\";\r\n// import { getEmployeelist } from \"../../Employees/EmployeeAction\";\r\n// import { getEvents } from \"../../Settings/Event/EventAction\";\r\n// import CandidateClearbit from \"../../../Components/Forms/Autocomplete/CandidateClearbit\";\r\n// import { setClearbitCandidateData } from \"../../Candidate/CandidateAction\";\r\n// yup validation scheme for creating a opportunity\r\n\r\n\r\nclass HourForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            reminder: true,\r\n        };\r\n    }\r\n    //   handleCallback = () => {\r\n    //     const { handleChooserModal, handleEventModal, callback } = this.props;\r\n    //     handleChooserModal(false);\r\n    //     handleEventModal(false);\r\n    //     callback && callback();\r\n    //   };\r\n    //   handleReminderChange = (checked) => {\r\n    //     this.setState({\r\n    //       reminder: checked,\r\n    //     });\r\n    //   };\r\n    //   componentDidMount() {\r\n    //     this.props.getCandidateProject(this.props.candidateId);\r\n\r\n    //   }\r\n    componentDidMount() {\r\n        const {\r\n            candidateId,\r\n            getCandidateProject,\r\n        } = this.props;\r\n\r\n        getCandidateProject(candidateId);\r\n\r\n    }\r\n\r\n    render() {\r\n        const projectData = this.props.candidateProject.map((item) => {\r\n            return {\r\n                label: `${item.projectName}`,\r\n                // label: `${item.salutation || \"\"} ${item.firstName ||\r\n                //   \"\"} ${item.middleName || \"\"} ${item.lastName || \"\"}`,\r\n                value: item.projectName,\r\n            };\r\n        });\r\n        const {\r\n            addHour,\r\n\r\n            startTime,\r\n            endTime,\r\n\r\n        } = this.props;\r\n        // console.log(defaultAccounts);\r\n        return (\r\n            <>\r\n                <Formik\r\n                    enableReinitialize\r\n                    initialValues={{\r\n\r\n                        projectName: \"\",\r\n\r\n                        startDate: \"\",\r\n                        endDate: \"\",\r\n                        organizationId: this.props.organizationId,\r\n                        // userId:this.props.userId,\r\n                        candidateId: this.props.candidateId\r\n\r\n\r\n\r\n\r\n                    }\r\n                    }\r\n                    // validationSchema={EventSchema}\r\n                    onSubmit={(values, { resetForm }) => {\r\n                        console.log(values);\r\n\r\n                        let timeZoneFirst = \"GMT+05:30 Kolkata\";\r\n\r\n\r\n                        let mytimeZone = timeZoneFirst.substring(4, 10);\r\n                        console.log(mytimeZone);\r\n\r\n                        var a = mytimeZone.split(\":\");\r\n                        console.log(a);\r\n                        var timeZoneminutes = +a[0] * 60 + +a[1];\r\n                        console.log(timeZoneminutes);\r\n                        if (!values.endDate) {\r\n                            values.endDate = values.startDate;\r\n                        }\r\n                        let newStartDate = moment(values.startDate).format(\"YYYY-MM-DD\");\r\n                        console.log(newStartDate);\r\n                        //Time calculation\r\n                        let firstStartTime = moment(values.startTime).format(\r\n                            \"HH:mm:ss.SSS[Z]\"\r\n                        ); // getting start time from form input\r\n                        console.log(firstStartTime);\r\n\r\n                        let firstStartHours = firstStartTime.substring(0, 5); // getting only hours and minutes\r\n                        console.log(firstStartHours);\r\n\r\n                        let timeEndPart = firstStartTime.substring(5, 13); // getting seconds and rest\r\n                        console.log(timeEndPart);\r\n\r\n                        var firstStartTimeSplit = firstStartHours.split(\":\"); // removing the colon\r\n                        console.log(firstStartTimeSplit);\r\n\r\n                        var minutes =\r\n                            +firstStartTimeSplit[0] * 60 + +firstStartTimeSplit[1]; // converting hours into minutes\r\n                        console.log(minutes);\r\n\r\n                        var firstStartTimeminutes = minutes - timeZoneminutes; // start time + time zone\r\n                        console.log(firstStartTimeminutes);\r\n\r\n                        let h = Math.floor(firstStartTimeminutes / 60); // converting to hours\r\n                        let m = firstStartTimeminutes % 60;\r\n                        h = h < 10 ? \"0\" + h : h;\r\n                        m = m < 10 ? \"0\" + m : m;\r\n                        let finalStartTime = `${h}:${m}`;\r\n                        console.log(finalStartTime);\r\n\r\n                        let newStartTime = `${finalStartTime}${timeEndPart}`;\r\n                        console.log(newStartTime);\r\n\r\n                        let newEndDate = moment(values.endDate).format(\"YYYY-MM-DD\");\r\n                        let firstEndTime = moment(values.endTime).format(\"HH:mm:ss.SSS[Z]\"); // getting start time from form input\r\n                        console.log(firstEndTime);\r\n                        let firstEndHours = firstEndTime.substring(0, 5); // getting only hours and minutes\r\n                        console.log(firstEndHours);\r\n\r\n                        var firstEndTimeSplit = firstEndHours.split(\":\"); // removing the colon\r\n                        console.log(firstEndTimeSplit);\r\n                        var endMinutes = +firstEndTimeSplit[0] * 60 + +firstEndTimeSplit[1]; // converting hours into minutes\r\n                        console.log(endMinutes);\r\n                        var firstEndTimeminutes = Math.abs(endMinutes - timeZoneminutes); // start time + time zone\r\n                        console.log(firstEndTimeminutes);\r\n                        let hr = Math.floor(firstEndTimeminutes / 60); // converting to hours\r\n                        console.log(hr);\r\n                        let mi = firstEndTimeminutes % 60;\r\n                        console.log(hr);\r\n                        hr = hr < 10 ? \"0\" + hr : hr;\r\n                        mi = mi < 10 ? \"0\" + mi : mi;\r\n                        let finalEndTime = `${hr}:${mi}`;\r\n                        console.log(finalEndTime);\r\n                        console.log(timeEndPart);\r\n                        console.log(`${finalEndTime}${timeEndPart}`);\r\n\r\n                        let newEndTime = `${finalEndTime}${timeEndPart}`;\r\n                        // let newEndTime = moment(values.endTime).format(\"HH:mm:ss.SSS[Z]\");\r\n\r\n                        // let testVal = {\r\n                        //   ...values,\r\n                        //   callCategory: this.state.category,\r\n                        //   callType: this.state.Type,\r\n                        //   // contactId:\"\",\r\n                        //   // assignedTo: \"\",\r\n\r\n                        //   // ownerIds: userId === userId ? [userId] : [],\r\n\r\n                        //   startDate: `${newStartDate}T${newStartTime}`,\r\n                        //   endDate: `${newEndDate}T${newEndTime}`,\r\n\r\n                        //   startTime: 0,\r\n                        //   endTime: 0,\r\n                        // };\r\n\r\n\r\n\r\n                        addHour(\r\n\r\n                            {\r\n                                ...values,\r\n                                //   startDate: `${newStartDate}T${newStartTime}`,\r\n                                //   endDate: `${newEndDate}T${newEndTime}`,\r\n\r\n                                startDate: values.startDate,\r\n                                endDate: values.endDate,\r\n                                //   startTime: 0,\r\n                                //   endTime: 0,\r\n                            },\r\n                            this.handleCallback\r\n                        )\r\n\r\n                        resetForm();\r\n                    }}\r\n                >\r\n                    {({\r\n                        errors,\r\n                        touched,\r\n                        isSubmitting,\r\n                        setFieldValue,\r\n                        setFieldTouched,\r\n                        values,\r\n                        ...rest\r\n                    }) => (\r\n                        <Form className=\"form-background\">\r\n                            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                                <div\r\n                                    style={{\r\n                                        height: \"100%\",\r\n                                        width: \"47%\",\r\n                                    }}\r\n                                >\r\n                                    <Spacer />\r\n\r\n\r\n                                    <Field\r\n                                        isRequired\r\n                                        name=\"projectName\"\r\n                                        //label=\"Topic\"\r\n                                        label={\r\n                                            <FormattedMessage\r\n                                                id=\"app.project\"\r\n                                                defaultMessage=\"Project\"\r\n                                            />\r\n                                        }\r\n                                        isColumn\r\n                                        width={\"100%\"}\r\n                                        // component={InputComponent}\r\n                                        component={SelectComponent}\r\n                                        //value={values.sectorId}\r\n                                        options={\r\n                                            Array.isArray(projectData) ? projectData : []\r\n                                        }\r\n                                        inlineLabel\r\n                                    />\r\n                                    <Spacer />\r\n                                    <div>\r\n                                        <FlexContainer justifyContent=\"space-between\">\r\n                                            <div style={{ width: \"47%\" }}>\r\n                                                <Field\r\n                                                    isRequired\r\n                                                    name=\"startDate\"\r\n                                                    // label=\"Start Time\"\r\n                                                    label={\r\n                                                        <FormattedMessage\r\n                                                            id=\"app.startTime\"\r\n                                                            defaultMessage=\"Start Time\"\r\n                                                        />\r\n                                                    }\r\n                                                    isColumn\r\n                                                    component={TimePicker}\r\n                                                    use12Hours\r\n                                                    value={values.startDate}\r\n                                                    inlineLabel\r\n                                                    style={{\r\n                                                        width: \"100%\",\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                            <div style={{ width: \"47%\" }}>\r\n                                                <Field\r\n                                                    isRequired\r\n                                                    name=\"endDate\"\r\n                                                    //label=\"End Time\"\r\n                                                    label={\r\n                                                        <FormattedMessage\r\n                                                            id=\"app.endtime\"\r\n                                                            defaultMessage=\"End Time\"\r\n                                                        />\r\n                                                    }\r\n                                                    isColumn\r\n                                                    component={TimePicker}\r\n                                                    use12Hours\r\n                                                    value={values.endDate}\r\n                                                    inlineLabel\r\n                                                    style={{\r\n                                                        width: \"100%\",\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                        </FlexContainer>\r\n                                        <FlexContainer justifyContent=\"space-between\">\r\n                                            {/* <div style={{ width: \"47%\" }}>\r\n                                                <Field\r\n                                                    isRequired\r\n                                                    name=\"hour\"\r\n                                                    //label=\"Topic\"\r\n                                                    label={\r\n                                                        <FormattedMessage\r\n                                                            id=\"app.hour\"\r\n                                                            defaultMessage=\"Hour\"\r\n                                                        />\r\n                                                    }\r\n                                                    isColumn\r\n                                                    width={\"100%\"}\r\n                                                    component={InputComponent}\r\n                                                    inlineLabel\r\n                                                />\r\n                                            </div> */}\r\n\r\n                                        </FlexContainer>\r\n                                    </div>\r\n\r\n\r\n                                    <Spacer />\r\n\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                            <Spacer />\r\n                            <FlexContainer justifyContent=\"flex-end\">\r\n                                {/* {isEditing && ( */}\r\n                                {/* <>\r\n                    <StyledPopconfirm\r\n                      title=\"Do you want to delete?\"\r\n                     // onConfirm={() => deleteEvent(prefillEvent.eventId)}\r\n                    >\r\n                      <Button\r\n                        type=\"danger\"\r\n                        htmlType=\"submit\"\r\n                        //Loading={deletingEvent}\r\n                      >\r\n                        <FormattedMessage\r\n                          id=\"app.delete\"\r\n                          defaultMessage=\"Delete\"\r\n                        />\r\n                      </Button>\r\n                    </StyledPopconfirm>\r\n                  </> */}\r\n                                {/* )} */}\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    htmlType=\"submit\"\r\n                                    Loading={this.props.addingPlannerHour}\r\n                                >\r\n                                    {/* {isEditing ? \"Update\" : */}\r\n                                    <FormattedMessage\r\n                                        id=\"app.create\"\r\n                                        defaultMessage=\"Create\"\r\n                                    />\r\n                                    {/* } */}\r\n                                </Button>\r\n                            </FlexContainer>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = ({ auth, event, employee, events, candidate, planner }) => ({\r\n    //   addingEvent: event.addingEvent,\r\n    //   updatingEvent: event.updatingEvent,\r\n    //addingPlannerHour:events.addingPlannerHour\r\n    candidateProject: planner.candidateProject,\r\n    addingPlannerHour: planner.addingPlannerHour,\r\n    candidateId: auth.userDetails.candidateId,\r\n    userId: auth.userDetails.userId,\r\n    organizationId: auth.userDetails.organizationId\r\n\r\n\r\n    //   deletingEvent: event.deleteEvent,\r\n    //   employees: employee.employees,\r\n    //   events: events.events,\r\n    //   candidateId: candidate.clearbitCandidate.candidateId,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n    bindActionCreators(\r\n        {\r\n            getCandidateProject,\r\n            addHour\r\n            //   addEvent,\r\n            //   deleteEvent,\r\n            //   updateEvent,\r\n            //   handleChooserModal,\r\n            //   handleEventModal,\r\n            //   getEmployeelist,\r\n            //   getEvents,\r\n            //   setClearbitCandidateData\r\n        },\r\n        dispatch\r\n    );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HourForm);\r\n","import React, { Component, lazy, Suspense } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n import HourForm from \"../Child/HourForm\"\r\nimport { Icon } from \"antd\";\r\nimport { StyledTabs } from \"../../../../Components/UI/Antd\";\r\nimport { TabsWrapper } from \"../../../../Components/UI/Layout\";\r\n// import CallForm from \"../../Call/Child/CallForm\";\r\n// import EventForm from \"../../Event/Child/EventForm\";\r\n// import TaskForm from \"../../Task/Child/TaskForm\";\r\n// import LeaveForm from \"../../Leave/Child/Tab/LeaveForm\";\r\n// import ProjectForm from \"../../Project/ProjectForm\";\r\nimport { CalendarOutlined, PhoneOutlined, ProjectOutlined } from \"@ant-design/icons\";\r\n\r\nconst TabPane = StyledTabs.TabPane;\r\n\r\nexport class PlannerTab extends Component {\r\n  render() {\r\n    const {\r\n      plannerStartDate,\r\n      plannerEndDate,\r\n      plannerStartTime,\r\n      plannerEndTime,\r\n    } = this.props;\r\n    return (\r\n      <>\r\n        <TabsWrapper>\r\n          <StyledTabs\r\n            defaultActiveKey=\"2\"\r\n            style={{ overflow: \"visible\", width: \"53vw\", padding: \"0.9375em\" }}\r\n            animated={false}\r\n          >\r\n            {/* <TabPane\r\n              tab={\r\n                <span>\r\n                  <PhoneOutlined type=\"phone\" />\r\n                  Calls\r\n                </span>\r\n              }\r\n              key=\"1\"\r\n            >\r\n              <Suspense fallback={\"Loading ...\"}>\r\n                <CallForm\r\n                  startDate={plannerStartDate}\r\n                  endDate={plannerEndDate}\r\n                  startTime={plannerStartTime}\r\n                  endTime={plannerEndTime}\r\n                />\r\n              </Suspense>\r\n            </TabPane> */}\r\n\r\n            {/* <TabPane\r\n              tab={\r\n                <span>\r\n                  <CalendarOutlined type=\"calendar\" />\r\n                  Events\r\n                </span>\r\n              }\r\n              key=\"2\"\r\n            >\r\n              <Suspense fallback={\"Loading ...\"}>\r\n                <EventForm\r\n                  // startDate={plannerStartDate}\r\n                  // endDate={plannerEndDate}\r\n                  startTime={plannerStartTime}\r\n                  endTime={plannerEndTime}\r\n                />\r\n              </Suspense>\r\n            </TabPane> */}\r\n            {/* <TabPane\r\n              tab={\r\n                <span>\r\n                  \r\n                  <i class=\"fas fa-tasks\"></i> &nbsp;\r\n                  Tasks\r\n                </span>\r\n              }\r\n              key=\"3\"\r\n            >\r\n              <Suspense fallback={\"Loading ...\"}>\r\n                <TaskForm\r\n                startDate={plannerStartDate}\r\n                endDate={plannerEndDate}\r\n                />\r\n              </Suspense>\r\n            </TabPane> */}\r\n            <TabPane\r\n              tab={\r\n                <span>\r\n                  <i class=\"fas fa-luggage-cart\"></i>&nbsp;\r\n                  Hours\r\n                </span>\r\n              }\r\n              key=\"1\"\r\n            >\r\n              <Suspense fallback={\"Loading ...\"}>\r\n                <HourForm\r\n                \r\n                />\r\n              </Suspense>\r\n            </TabPane>\r\n          \r\n          </StyledTabs>\r\n        </TabsWrapper>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ planner }) => ({\r\n//   plannerStartDate: planner.plannerStartDate,\r\n//   plannerEndDate: planner.plannerEndDate,\r\n//   plannerStartTime: planner.plannerStartTime,\r\n//   plannerEndTime: planner.plannerEndTime,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators({}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlannerTab);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { Button, Icon } from \"antd\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { StyledDrawer } from \"../../../../Components/UI/Antd\";\r\nimport { FlexContainer } from \"../../../../Components/UI/Layout\";\r\n\r\nimport { handleChooserModal } from \"../PlannerAction\";\r\nimport { SearchSelect } from \"../../../../Components/Forms/Formik/SearchSelect\";\r\n import PlannerTab from \"./PlannerTab\";\r\n\r\nclass FormChooserModal extends React.Component {\r\n  render() {\r\n    const {\r\n      chooserModal,\r\n      handleChooserModal,\r\n      handleCallModal,\r\n      handleEventModal,\r\n      handleTaskModal,\r\n    } = this.props;\r\n    return (\r\n      <>\r\n        <StyledDrawer\r\n             title=\"Schedule\"\r\n\r\n        //   title={<FormattedMessage\r\n        //     id=\"app.schedule\"\r\n        //     defaultMessage=\"Schedule\"\r\n        //   />}\r\n          visible={chooserModal}\r\n          width={\"55vw\"}\r\n          bodyStyle={{ padding: 0 }}\r\n          style={{ overflow: \"visible\", top: 40 }}\r\n          maskClosable={false}\r\n          destroyOnClose\r\n          onClose={() => handleChooserModal(false)}\r\n          footer={null}\r\n        >\r\n          <FlexContainer alignItems=\"center\" justifyContent=\"space-evenly\">\r\n            <PlannerTab />\r\n          </FlexContainer>\r\n        </StyledDrawer>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ call, event, task, planner, leave }) => ({\r\n  chooserModal: planner.chooserModal,\r\n//   callModal: call.callModal,\r\n//   eventModal: event.eventModal,\r\n//   taskModal: task.taskModal,\r\n//   leaveModal: leave.leaveModal\r\n});\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n       handleChooserModal,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormChooserModal);\r\n","function defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.dependencies = dependencies;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nexport var createSelector = createSelectorCreator(defaultMemoize);\n\nexport function createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","import { createSelector } from \"reselect\";\r\nimport moment from \"moment\";\r\n\r\n\r\nconst hourList = (auth) => auth.hourListByUserId;\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const hoursSelector = createSelector([hourList], (hours) => {\r\n  console.log(\"inside event selector\");\r\n  return hours.map((hour) => {\r\n    console.log(hour)\r\n    console.log(hour.projectName)\r\n    var d = new Date();\r\n    console.log(`local sysytem date ${d}`);\r\n    var eventDate = moment(hour.startDate);\r\n    var eventendDate = moment(hour.endDate);\r\n    console.log(`event start date ${eventDate}`);\r\n    console.log(`event end date ${eventendDate}`);\r\n\r\n    if (moment().isBetween(eventDate, eventendDate)) {\r\n      var value = \"orange\";\r\n    } else {\r\n      var value = \"white\";\r\n    }\r\n\r\n    return {\r\n      title: hour.projectName,\r\n      start: hour.startDate,\r\n    end: hour.endDate,\r\n color: \"#3174ad\",\r\n     \r\n  fontColor: value,\r\n      // animation: value,\r\n      type: \"event\",\r\n\r\n      data: hour,\r\n    };\r\n  });\r\n});\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { CalendarInstance } from \"../../../../Components/Utils\";\r\nimport dayjs from \"dayjs\";\r\nimport {\r\n  ApplicationWrapper,\r\n  LayoutWrapper,\r\n  MainWrapper,\r\n} from \"../../../../Components/UI/Layout\";\r\n import FormChooserModal from \"./FormChooserModal\";\r\n import { handleChooserModal, setPlannerDate } from \"../PlannerAction\";\r\nimport {\r\n  getHourListByUserId,\r\n  // getEventsListByUserId,\r\n  // getTasksListByUserId,\r\n  // getLeavesByUserId,\r\n} from \"../../../Auth/AuthAction\";\r\n\r\n\r\nimport {\r\n  hoursSelector,\r\n \r\n} from \"../PlannerSelector\";\r\n\r\n// import {\r\n//   eventSelector,\r\n//   callSelector,\r\n//   taskSelector,\r\n//   leaveSelector,\r\n//   holidaySelector,\r\n// } from \"../../PlannerSelector\";\r\n// import AddEventModal from \"../../../Event/Child/AddEventModal\";\r\n// import AddCallModal from \"../../../Call/Child/AddCallModal\";\r\n// import AddTaskModal from \"../../../Task/Child/AddTaskModal\";\r\n// import AddLeavesModal from \"../../../Leave/Child/Tab/AddLeavesModal\";\r\n// import AddProjectModal from \"../../../Project/AddProjectModal\";\r\n// import { handleLeavesModal } from \"../../../Leave/LeavesAction\";\r\n// import { handleEventModal } from \"../../../Event/EventAction\";\r\n// import { handleCallModal } from \"../../../Call/CallAction\";\r\n// import { handleTaskModal } from \"../../../Task/TaskAction\";\r\n// import { getHoliday } from \"../../../Holiday/HolidayAction\";\r\n// import { handleProjectModal } from \"../../../Project/ProjectAction\";\r\n// import { LeavesReducer } from \"../../../Leave/LeavesReducer\";\r\nexport class PlannerCalendar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selectedEvent: {},\r\n      selectedCall: {},\r\n      selectedTask: {},\r\n      selectedLeaves: {},\r\n      selectedProject: {},\r\n    };\r\n  }\r\n  eventStyleGetter = (event, start, end, isSelected) => {\r\n    var backgroundColor = event.color;\r\n    var color = event.fontColor;\r\n    var style = {\r\n      backgroundColor: backgroundColor,\r\n      // animation: animation,\r\n      borderRadius: \"0.1875em\",\r\n      padding: 0,\r\n      paddingLeft: \"0.3rem\",\r\n      opacity: 0.8,\r\n      color: color,\r\n      fontWeight: 600,\r\n      border: \"0em\",\r\n      display: \"block\",\r\n    };\r\n    return {\r\n      style: style,\r\n    };\r\n  };\r\n\r\n  componentDidMount() {\r\n    const {\r\n      // getCallsListByUserId,\r\n      // getHourListByUserId,\r\n      getHourListByUserId,\r\n      // getLeavesByUserId,\r\n      // getHoliday,\r\n      userDetails: { candidateId },\r\n    } = this.props;\r\n    // getCallsListByUserId(userId);\r\n    getHourListByUserId(candidateId);\r\n    // getLeavesByUserId(userId);\r\n    // getTasksListByUserId(userId);\r\n    // getHoliday();\r\n  }\r\n\r\n  onSelectEvent = (e) => {\r\n    console.log(e);\r\n    if (e.type === \"event\") {\r\n      this.props.handleEventModal(true);\r\n      this.setState({ selectedEvent: e.data });\r\n    }\r\n    if (e.type === \"call\") {\r\n      this.props.handleCallModal(true);\r\n      this.setState({ selectedCall: e.data });\r\n    }\r\n    if (e.type === \"task\") {\r\n      this.props.handleTaskModal(true);\r\n      this.setState({ selectedTask: e.data });\r\n    }\r\n    if (e.type === \"leave\") {\r\n      this.props.handleLeavesModal(true);\r\n      this.setState({ selectedLeaves: e.data });\r\n    }\r\n    if (e.type === \"project\") {\r\n      this.props.handleProjectModal(true);\r\n      this.setState({ selectedProject: e.data });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      handleChooserModal,\r\n      setPlannerDate,\r\n      hours,\r\n      events,\r\n      calls,\r\n      tasks,\r\n      leaves,\r\n      holidays,\r\n      projects,\r\n      addCallModal,\r\n      addEventModal,\r\n      addTaskModal,\r\n      addLeavesModal,\r\n      addProjectModal,\r\n      handleCallModal,\r\n      handleEventModal,\r\n      handleTaskModal,\r\n      handleLeavesModal,\r\n      handleProjectModal,\r\n    } = this.props;\r\n    return (\r\n      <MainWrapper>\r\n        <CalendarInstance\r\n          selectable\r\n           handleChooserModal={handleChooserModal}\r\n           eventPropGetter={this.eventStyleGetter}\r\n           onSelectSlot={setPlannerDate}\r\n        //   onSelectEvent={this.onSelectEvent}\r\n          events={[...hours, ]}\r\n        />\r\n        <FormChooserModal />\r\n        {/* <AddEventModal\r\n          isEditing\r\n          prefillEvent={{\r\n            ...this.state.selectedEvent,\r\n            startDate: dayjs(this.state.selectedEvent.startDate),\r\n            endDate: dayjs(this.state.selectedEvent.endDate),\r\n            startTime: dayjs(this.state.selectedEvent.startDate),\r\n            endTime: dayjs(this.state.selectedEvent.endDate),\r\n          }}\r\n          addEventModal={addEventModal}\r\n          handleEventModal={handleEventModal}\r\n        /> */}\r\n        {/* <AddCallModal\r\n          isEditing\r\n          prefillCall={{\r\n            ...this.state.selectedCall,\r\n\r\n            startDate: dayjs(this.state.selectedCall.startDate),\r\n            endDate: dayjs(this.state.selectedCall.endDate),\r\n            startTime: dayjs(this.state.selectedCall.startDate),\r\n            endTime: dayjs(this.state.selectedCall.endDate),\r\n          }}\r\n          addCallModal={addCallModal}\r\n          handleCallModal={handleCallModal} */}\r\n        {/* /> */}\r\n        {/* <AddTaskModal\r\n          addTaskModal={addTaskModal}\r\n          handleTaskModal={handleTaskModal}\r\n          selectedTask={this.state.selectedTask}\r\n          isEditing\r\n          prefillTask={{\r\n            ...this.state.selectedTask,\r\n\r\n            startDate: dayjs(this.state.selectedTask.startDate),\r\n            endDate: dayjs(this.state.selectedTask.endDate),\r\n            startTime: dayjs(this.state.selectedTask.startDate),\r\n            endTime: dayjs(this.state.selectedTask.endDate),\r\n          }}\r\n        /> */}\r\n        {/* <AddLeavesModal\r\n          addLeavesModal={addLeavesModal}\r\n          handleLeavesModal={handleLeavesModal}\r\n          selectedLeaves={this.state.selectedLeaves}\r\n          isEditing\r\n          prefillLeave={{\r\n            ...this.state.selectedLeaves,\r\n\r\n            startDate: dayjs(this.state.selectedLeaves.startDate),\r\n            endDate: dayjs(this.state.selectedLeaves.endDate),\r\n          }}\r\n        /> */}\r\n\r\n        {/* <AddProjectModal\r\n          isEditing\r\n          prefillEvent={{\r\n            ...this.state.selectedProject,\r\n            startDate: dayjs(this.state.selectedProject.startDate),\r\n            endDate: dayjs(this.state.selectedProject.endDate),\r\n            startTime: dayjs(this.state.selectedProject.startDate),\r\n            endTime: dayjs(this.state.selectedProject.endDate),\r\n          }}\r\n          addProjectModal={addProjectModal}\r\n          handleProjectModal={handleProjectModal}\r\n        /> */}\r\n      </MainWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ auth, leave, call, event, task, holiday, project }) => ({\r\n   userDetails: auth.userDetails,\r\n   hourListByUserId:auth.hourListByUserId,\r\n\r\n//   fetchingCallsListByUserId: auth.fetchingCallsListByUserId,\r\n//   callsListByUserId: auth.callsListByUserId,\r\n//   fetchingEventsListByUserId: auth.fetchingEventsListByUserId,\r\n//   eventsListByUserId: auth.eventsListByUserId,\r\n//   fetchingTasksListByUserId: auth.fetchingTasksListByUserId,\r\n//   tasksListByUserId: auth.tasksListByUserId,\r\n//   fetchingLeavesByUserId: auth.fetchingLeavesByUserId,\r\n//   fetchingLeavesByUserIdError: auth.fetchingLeavesByUserIdError,\r\n//   leavesListByUserId: auth.leavesListByUserId,\r\n   hours: hoursSelector(auth),\r\n//   events: eventSelector(auth),\r\n//   tasks: taskSelector(auth),\r\n//   leaves: leaveSelector(auth),\r\n//   holidays: holidaySelector(holiday),\r\n//   // projects: projectSelector(auth),\r\n//   addCallModal: call.addCallModal,\r\n//   addEventModal: event.addEventModal,\r\n//   addTaskModal: task.addTaskModal,\r\n//   addLeavesModal: leave.addLeavesModal,\r\n//   addProjectModal: project.addProjectModal,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n       handleChooserModal,\r\n       setPlannerDate,\r\n       getHourListByUserId\r\n    //   getCallsListByUserId,\r\n    //   getEventsListByUserId,\r\n    //   getTasksListByUserId,\r\n    //   getLeavesByUserId,\r\n    //   handleEventModal,\r\n    //   handleCallModal,\r\n    //   handleTaskModal,\r\n    //   handleLeavesModal,\r\n    //   handleProjectModal,\r\n    //   getHoliday,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlannerCalendar);\r\n"],"names":["TimePicker","value","field","label","noLabel","isColumn","inlineLabel","form","setFieldValue","setFieldTouched","touched","errors","props","style","flexBasis","allowClear","format","onChange","time","timeString","name","moment","onBlur","get","alignItems","flexWrap","HourForm","state","reminder","this","candidateId","getCandidateProject","projectData","candidateProject","map","item","projectName","addHour","startTime","endTime","enableReinitialize","initialValues","startDate","endDate","organizationId","onSubmit","values","resetForm","console","log","mytimeZone","substring","a","split","timeZoneminutes","newStartDate","firstStartTime","firstStartHours","timeEndPart","firstStartTimeSplit","minutes","firstStartTimeminutes","h","Math","floor","m","finalStartTime","newStartTime","firstEndTime","firstEndHours","firstEndTimeSplit","endMinutes","firstEndTimeminutes","abs","hr","mi","finalEndTime","handleCallback","isSubmitting","className","display","justifyContent","height","width","isRequired","id","defaultMessage","component","SelectComponent","options","Array","isArray","use12Hours","type","htmlType","Loading","addingPlannerHour","Component","connect","auth","planner","event","employee","events","candidate","userDetails","userId","dispatch","bindActionCreators","TabPane","StyledTabs","PlannerTab","plannerStartDate","plannerEndDate","plannerStartTime","plannerEndTime","defaultActiveKey","overflow","padding","animated","tab","class","Suspense","fallback","FormChooserModal","chooserModal","handleChooserModal","handleCallModal","handleEventModal","handleTaskModal","title","visible","bodyStyle","top","maskClosable","destroyOnClose","onClose","footer","React","call","task","leave","defaultEqualityCheck","b","createSelector","memoize","_len","arguments","length","memoizeOptions","_key","_len2","funcs","_key2","recomputations","resultFunc","pop","dependencies","every","dep","dependencyTypes","join","Error","getDependencies","memoizedResultFunc","apply","undefined","concat","selector","params","i","push","resetRecomputations","createSelectorCreator","func","equalityCheck","lastArgs","lastResult","prev","next","areArgumentsShallowlyEqual","hoursSelector","hourListByUserId","hours","hour","d","Date","eventDate","eventendDate","isBetween","start","end","color","fontColor","data","PlannerCalendar","eventStyleGetter","isSelected","backgroundColor","borderRadius","paddingLeft","opacity","fontWeight","border","onSelectEvent","e","setState","selectedEvent","selectedCall","selectedTask","handleLeavesModal","selectedLeaves","handleProjectModal","selectedProject","getHourListByUserId","setPlannerDate","calls","tasks","leaves","holidays","projects","addCallModal","addEventModal","addTaskModal","addLeavesModal","addProjectModal","selectable","eventPropGetter","onSelectSlot","holiday","project"],"sourceRoot":""}